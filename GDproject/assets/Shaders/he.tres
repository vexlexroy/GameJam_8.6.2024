[gd_resource type="VisualShader" load_steps=12 format=3 uid="uid://ybhboqhe8w43"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_y2m7l"]
output_port_for_preview = 0
constant = 0.5

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_sodgp"]
output_port_for_preview = 0
constant = Color(0.151276, 0.151276, 0.151276, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_l1s2g"]
constant = Color(0.507665, 0.580212, 0.601788, 1)

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_ncplh"]
function = 0

[sub_resource type="FastNoiseLite" id="FastNoiseLite_pmoik"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_c2sh7"]
noise = SubResource("FastNoiseLite_pmoik")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_g68k1"]
texture = SubResource("NoiseTexture2D_c2sh7")
texture_type = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_qv4xe"]
input_name = "time"

[sub_resource type="VisualShaderNodeRotationByAxis" id="VisualShaderNodeRotationByAxis_08csb"]
default_input_values = [1, 50.0, 2, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_cy1t3"]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_pdn1l"]
constant = 20.0

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D tex_frg_5 : hint_normal;



void fragment() {
// ColorConstant:2
	vec4 n_out2p0 = vec4(0.507665, 0.580212, 0.601788, 1.000000);


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, UV);


// FloatConstant:9
	float n_out9p0 = 20.000000;


// Input:6
	float n_out6p0 = TIME;


// FloatFunc:4
	float n_out4p0 = sin(n_out6p0);


// FloatOp:8
	float n_out8p0 = n_out9p0 * n_out4p0;


	vec3 n_out7p0;
	mat4 n_out7p1;
// RotationByAxis:7
	vec3 n_in7p2 = vec3(0.00000, 0.00000, 0.00000);
	{
		float __angle = n_out8p0;
		vec3 __axis = normalize(n_in7p2);
		mat3 __rot_matrix = mat3(
			vec3( cos(__angle)+__axis.x*__axis.x*(1.0 - cos(__angle)), __axis.x*__axis.y*(1.0-cos(__angle))-__axis.z*sin(__angle), __axis.x*__axis.z*(1.0-cos(__angle))+__axis.y*sin(__angle) ),
			vec3( __axis.y*__axis.x*(1.0-cos(__angle))+__axis.z*sin(__angle), cos(__angle)+__axis.y*__axis.y*(1.0-cos(__angle)), __axis.y*__axis.z*(1.0-cos(__angle))-__axis.x*sin(__angle) ),
			vec3( __axis.z*__axis.x*(1.0-cos(__angle))-__axis.y*sin(__angle), __axis.z*__axis.y*(1.0-cos(__angle))+__axis.x*sin(__angle), cos(__angle)+__axis.z*__axis.z*(1.0-cos(__angle)) )
		);
		n_out7p0 = vec3(n_out5p0.xyz) * __rot_matrix;
		n_out7p1 = mat4(__rot_matrix);
	}


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out7p0.x;


}
"
graph_offset = Vector2(-286.605, -4.47284)
nodes/fragment/0/position = Vector2(880, 260)
nodes/fragment/2/node = SubResource("VisualShaderNodeColorConstant_l1s2g")
nodes/fragment/2/position = Vector2(140, 140)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatFunc_ncplh")
nodes/fragment/4/position = Vector2(100, 320)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_g68k1")
nodes/fragment/5/position = Vector2(0, 460)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_qv4xe")
nodes/fragment/6/position = Vector2(-260, 360)
nodes/fragment/7/node = SubResource("VisualShaderNodeRotationByAxis_08csb")
nodes/fragment/7/position = Vector2(540, 480)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatOp_cy1t3")
nodes/fragment/8/position = Vector2(320, 360)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatConstant_pdn1l")
nodes/fragment/9/position = Vector2(-200, 260)
nodes/fragment/connections = PackedInt32Array(6, 0, 4, 0, 5, 0, 7, 0, 7, 0, 0, 1, 4, 0, 8, 1, 9, 0, 8, 0, 2, 0, 0, 0, 8, 0, 7, 1)
nodes/fog/0/position = Vector2(580, 60)
nodes/fog/2/node = SubResource("VisualShaderNodeFloatConstant_y2m7l")
nodes/fog/2/position = Vector2(320, 60)
nodes/fog/3/node = SubResource("VisualShaderNodeColorConstant_sodgp")
nodes/fog/3/position = Vector2(320, 380)
